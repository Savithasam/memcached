        -:    0:Source:logger.c
        -:    0:Graph:logger.gcno
        -:    0:Data:logger.gcda
        -:    0:Runs:119
        -:    0:Programs:1
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include <errno.h>
        -:    7:#include <poll.h>
        -:    8:#include <ctype.h>
        -:    9:
        -:   10:#if defined(__sun)
        -:   11:#include <atomic.h>
        -:   12:#endif
        -:   13:
        -:   14:#include "memcached.h"
        -:   15:#include "bipbuffer.h"
        -:   16:
        -:   17:#ifdef LOGGER_DEBUG
        -:   18:#define L_DEBUG(...) \
        -:   19:    do { \
        -:   20:        fprintf(stderr, __VA_ARGS__); \
        -:   21:    } while (0)
        -:   22:#else
        -:   23:#define L_DEBUG(...)
        -:   24:#endif
        -:   25:
        -:   26:
        -:   27:/* TODO: put this in a struct and ditch the global vars. */
        -:   28:static logger *logger_stack_head = NULL;
        -:   29:static logger *logger_stack_tail = NULL;
        -:   30:static unsigned int logger_count = 0;
        -:   31:static volatile int do_run_logger_thread = 1;
        -:   32:static pthread_t logger_tid;
        -:   33:pthread_mutex_t logger_stack_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   34:
        -:   35:pthread_key_t logger_key;
        -:   36:
        -:   37:#if !defined(HAVE_GCC_64ATOMICS) && !defined(__sun)
        -:   38:pthread_mutex_t logger_atomics_mutex = PTHREAD_MUTEX_INITIALIZER;
        -:   39:#endif
        -:   40:
        -:   41:#define WATCHER_LIMIT 20
        -:   42:logger_watcher *watchers[20];
        -:   43:struct pollfd watchers_pollfds[20];
        -:   44:int watcher_count = 0;
        -:   45:
        -:   46:/* Should this go somewhere else? */
        -:   47:static const entry_details default_entries[] = {
        -:   48:    [LOGGER_ASCII_CMD] = {LOGGER_TEXT_ENTRY, 512, LOG_RAWCMDS, "<%d %s"},
        -:   49:    [LOGGER_EVICTION] = {LOGGER_EVICTION_ENTRY, 512, LOG_EVICTIONS, NULL},
        -:   50:    [LOGGER_ITEM_GET] = {LOGGER_ITEM_GET_ENTRY, 512, LOG_FETCHERS, NULL},
        -:   51:    [LOGGER_ITEM_STORE] = {LOGGER_ITEM_STORE_ENTRY, 512, LOG_MUTATIONS, NULL},
        -:   52:    [LOGGER_CRAWLER_STATUS] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   53:        "type=lru_crawler crawler=%d lru=%s low_mark=%llu next_reclaims=%llu since_run=%u next_run=%d elapsed=%u examined=%llu reclaimed=%llu"
        -:   54:    },
        -:   55:    [LOGGER_SLAB_MOVE] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   56:        "type=slab_move src=%d dst=%d"
        -:   57:    },
        -:   58:#ifdef EXTSTORE
        -:   59:    [LOGGER_EXTSTORE_WRITE] = {LOGGER_EXT_WRITE_ENTRY, 512, LOG_EVICTIONS, NULL},
        -:   60:    [LOGGER_COMPACT_START] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   61:        "type=compact_start id=%lu version=%llu"
        -:   62:    },
        -:   63:    [LOGGER_COMPACT_ABORT] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   64:        "type=compact_abort id=%lu"
        -:   65:    },
        -:   66:    [LOGGER_COMPACT_READ_START] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   67:        "type=compact_read_start id=%lu offset=%llu"
        -:   68:    },
        -:   69:    [LOGGER_COMPACT_READ_END] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   70:        "type=compact_read_end id=%lu offset=%llu rescues=%lu lost=%lu skipped=%lu"
        -:   71:    },
        -:   72:    [LOGGER_COMPACT_END] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   73:        "type=compact_end id=%lu"
        -:   74:    },
        -:   75:    [LOGGER_COMPACT_FRAGINFO] = {LOGGER_TEXT_ENTRY, 512, LOG_SYSEVENTS,
        -:   76:        "type=compact_fraginfo ratio=%.2f bytes=%lu"
        -:   77:    },
        -:   78:#endif
        -:   79:};
        -:   80:
        -:   81:#define WATCHER_ALL -1
        -:   82:static int logger_thread_poll_watchers(int force_poll, int watcher);
        -:   83:
        -:   84:/*************************
        -:   85: * Util functions shared between bg thread and workers
        -:   86: *************************/
        -:   87:
        -:   88:/* Logger GID's can be used by watchers to put logs back into strict order
        -:   89: */
        -:   90:static uint64_t logger_get_gid(void) {
        -:   91:    static uint64_t logger_gid = 0;
        -:   92:#ifdef HAVE_GCC_64ATOMICS
    58437:   93:    return __sync_add_and_fetch(&logger_gid, 1);
        -:   94:#elif defined(__sun)
        -:   95:    return atomic_inc_64_nv(&logger_gid);
        -:   96:#else
        -:   97:    mutex_lock(&logger_atomics_mutex);
        -:   98:    uint64_t res = ++logger_gid;
        -:   99:    mutex_unlock(&logger_atomics_mutex);
        -:  100:    return res;
        -:  101:#endif
        -:  102:}
        -:  103:
        -:  104:/* TODO: genericize lists. would be nice to import queue.h if the impact is
        -:  105: * studied... otherwise can just write a local one.
        -:  106: */
        -:  107:/* Add to the list of threads with a logger object */
      464:  108:static void logger_link_q(logger *l) {
      464:  109:    pthread_mutex_lock(&logger_stack_lock);
      467:  110:    assert(l != logger_stack_head);
        -:  111:
      467:  112:    l->prev = 0;
      467:  113:    l->next = logger_stack_head;
      467:  114:    if (l->next) l->next->prev = l;
      467:  115:    logger_stack_head = l;
      467:  116:    if (logger_stack_tail == 0) logger_stack_tail = l;
      467:  117:    logger_count++;
      467:  118:    pthread_mutex_unlock(&logger_stack_lock);
      467:  119:    return;
        -:  120:}
        -:  121:
        -:  122:/* Remove from the list of threads with a logger object */
        -:  123:/*static void logger_unlink_q(logger *l) {
        -:  124:    pthread_mutex_lock(&logger_stack_lock);
        -:  125:    if (logger_stack_head == l) {
        -:  126:        assert(l->prev == 0);
        -:  127:        logger_stack_head = l->next;
        -:  128:    }
        -:  129:    if (logger_stack_tail == l) {
        -:  130:        assert(l->next == 0);
        -:  131:        logger_stack_tail = l->prev;
        -:  132:    }
        -:  133:    assert(l->next != l);
        -:  134:    assert(l->prev != l);
        -:  135:
        -:  136:    if (l->next) l->next->prev = l->prev;
        -:  137:    if (l->prev) l->prev->next = l->next;
        -:  138:    logger_count--;
        -:  139:    pthread_mutex_unlock(&logger_stack_lock);
        -:  140:    return;
        -:  141:}*/
        -:  142:
        -:  143:/* Called with logger stack locked.
        -:  144: * Iterates over every watcher collecting enabled flags.
        -:  145: */
        4:  146:static void logger_set_flags(void) {
        4:  147:    logger *l = NULL;
        4:  148:    int x = 0;
        4:  149:    uint16_t f = 0; /* logger eflags */
        -:  150:
       84:  151:    for (x = 0; x < WATCHER_LIMIT; x++) {
       80:  152:        logger_watcher *w = watchers[x];
       80:  153:        if (w == NULL)
       74:  154:            continue;
        -:  155:
        6:  156:        f |= w->eflags;
        -:  157:    }
       24:  158:    for (l = logger_stack_head; l != NULL; l=l->next) {
       20:  159:        pthread_mutex_lock(&l->mutex);
       20:  160:        l->eflags = f;
       20:  161:        pthread_mutex_unlock(&l->mutex);
        -:  162:    }
        4:  163:    return;
        -:  164:}
        -:  165:
        -:  166:/*************************
        -:  167: * Logger background thread functions. Aggregates per-worker buffers and
        -:  168: * writes to any watchers.
        -:  169: *************************/
        -:  170:
        -:  171:#define LOGGER_PARSE_SCRATCH 4096
        -:  172:
        1:  173:static int _logger_thread_parse_ise(logentry *e, char *scratch) {
        -:  174:    int total;
        1:  175:    const char *cmd = "na";
        -:  176:    char keybuf[KEY_MAX_LENGTH * 3 + 1];
        1:  177:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        1:  178:    const char * const status_map[] = {
        -:  179:        "not_stored", "stored", "exists", "not_found", "too_large", "no_memory" };
        1:  180:    const char * const cmd_map[] = {
        -:  181:        "null", "add", "set", "replace", "append", "prepend", "cas" };
        -:  182:
        1:  183:    if (le->cmd <= 5)
        1:  184:        cmd = cmd_map[le->cmd];
        -:  185:
        1:  186:    uriencode(le->key, keybuf, le->nkey, LOGGER_PARSE_SCRATCH);
        5:  187:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  188:            "ts=%d.%d gid=%llu type=item_store key=%s status=%s cmd=%s ttl=%u clsid=%u\n",
        2:  189:            (int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        2:  190:            keybuf, status_map[le->status], cmd, le->ttl, le->clsid);
        1:  191:    return total;
        -:  192:}
        -:  193:
    58435:  194:static int _logger_thread_parse_ige(logentry *e, char *scratch) {
        -:  195:    int total;
    58435:  196:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
        -:  197:    char keybuf[KEY_MAX_LENGTH * 3 + 1];
    58435:  198:    const char * const was_found_map[] = {
        -:  199:        "not_found", "found", "flushed", "expired" };
        -:  200:
    58435:  201:    uriencode(le->key, keybuf, le->nkey, LOGGER_PARSE_SCRATCH);
   292175:  202:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  203:            "ts=%d.%d gid=%llu type=item_get key=%s status=%s clsid=%u\n",
   116870:  204:            (int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
   116870:  205:            keybuf, was_found_map[le->was_found], le->clsid);
    58435:  206:    return total;
        -:  207:}
        -:  208:
        1:  209:static int _logger_thread_parse_ee(logentry *e, char *scratch) {
        -:  210:    int total;
        -:  211:    char keybuf[KEY_MAX_LENGTH * 3 + 1];
        1:  212:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        1:  213:    uriencode(le->key, keybuf, le->nkey, LOGGER_PARSE_SCRATCH);
        5:  214:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  215:            "ts=%d.%d gid=%llu type=eviction key=%s fetch=%s ttl=%lld la=%d clsid=%u\n",
        2:  216:            (int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        1:  217:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
        1:  218:            (long long int)le->exptime, le->latime, le->clsid);
        -:  219:
        1:  220:    return total;
        -:  221:}
        -:  222:#ifdef EXTSTORE
        -:  223:static int _logger_thread_parse_extw(logentry *e, char *scratch) {
        -:  224:    int total;
        -:  225:    char keybuf[KEY_MAX_LENGTH * 3 + 1];
        -:  226:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
        -:  227:    uriencode(le->key, keybuf, le->nkey, LOGGER_PARSE_SCRATCH);
        -:  228:    total = snprintf(scratch, LOGGER_PARSE_SCRATCH,
        -:  229:            "ts=%d.%d gid=%llu type=extwrite key=%s fetch=%s ttl=%lld la=%d clsid=%u bucket=%u\n",
        -:  230:            (int)e->tv.tv_sec, (int)e->tv.tv_usec, (unsigned long long) e->gid,
        -:  231:            keybuf, (le->it_flags & ITEM_FETCHED) ? "yes" : "no",
        -:  232:            (long long int)le->exptime, le->latime, le->clsid, le->bucket);
        -:  233:
        -:  234:    return total;
        -:  235:}
        -:  236:#endif
        -:  237:/* Completes rendering of log line. */
    58437:  238:static enum logger_parse_entry_ret logger_thread_parse_entry(logentry *e, struct logger_stats *ls,
        -:  239:        char *scratch, int *scratch_len) {
    58437:  240:    int total = 0;
        -:  241:
    58437:  242:    switch (e->event) {
        -:  243:        case LOGGER_TEXT_ENTRY:
    #####:  244:            total = snprintf(scratch, LOGGER_PARSE_SCRATCH, "ts=%d.%d gid=%llu %s\n",
    #####:  245:                        (int)e->tv.tv_sec, (int)e->tv.tv_usec,
    #####:  246:                        (unsigned long long) e->gid, (char *) e->data);
        -:  247:            break;
        -:  248:        case LOGGER_EVICTION_ENTRY:
        1:  249:            total = _logger_thread_parse_ee(e, scratch);
        -:  250:            break;
        -:  251:#ifdef EXTSTORE
        -:  252:        case LOGGER_EXT_WRITE_ENTRY:
        -:  253:            total = _logger_thread_parse_extw(e, scratch);
        -:  254:            break;
        -:  255:#endif
        -:  256:        case LOGGER_ITEM_GET_ENTRY:
    58435:  257:            total = _logger_thread_parse_ige(e, scratch);
        -:  258:            break;
        -:  259:        case LOGGER_ITEM_STORE_ENTRY:
        1:  260:            total = _logger_thread_parse_ise(e, scratch);
        -:  261:            break;
        -:  262:
        -:  263:    }
        -:  264:
    58437:  265:    if (total >= LOGGER_PARSE_SCRATCH || total <= 0) {
        -:  266:        L_DEBUG("LOGGER: Failed to flatten log entry!\n");
        -:  267:        return LOGGER_PARSE_ENTRY_FAILED;
        -:  268:    } else {
    58437:  269:        *scratch_len = total;
        -:  270:    }
        -:  271:
        -:  272:    return LOGGER_PARSE_ENTRY_OK;
        -:  273:}
        -:  274:
        -:  275:/* Writes flattened entry to available watchers */
    58437:  276:static void logger_thread_write_entry(logentry *e, struct logger_stats *ls,
        -:  277:        char *scratch, int scratch_len) {
        -:  278:    int x, total;
        -:  279:    /* Write the line into available watchers with matching flags */
  1168740:  280:    for (x = 0; x < WATCHER_LIMIT; x++) {
  1168740:  281:        logger_watcher *w = watchers[x];
  1168740:  282:        char *skip_scr = NULL;
  1168740:  283:        if (w == NULL || (e->eflags & w->eflags) == 0)
  1111477:  284:            continue;
        -:  285:
        -:  286:         /* Avoid poll()'ing constantly when buffer is full by resetting a
        -:  287:         * flag periodically.
        -:  288:         */
    59840:  289:        while (!w->failed_flush &&
     1448:  290:                (skip_scr = (char *) bipbuf_request(w->buf, scratch_len + 128)) == NULL) {
     1129:  291:            if (logger_thread_poll_watchers(0, x) <= 0) {
        -:  292:                L_DEBUG("LOGGER: Watcher had no free space for line of size (%d)\n", scratch_len + 128);
     1122:  293:                w->failed_flush = true;
        -:  294:            }
        -:  295:        }
        -:  296:
    57263:  297:        if (w->failed_flush) {
        -:  298:            L_DEBUG("LOGGER: Fast skipped for watcher [%d] due to failed_flush\n", w->sfd);
    56944:  299:            w->skipped++;
    56944:  300:            ls->watcher_skipped++;
    56944:  301:            continue;
        -:  302:        }
        -:  303:
      319:  304:        if (w->skipped > 0) {
        2:  305:            total = snprintf(skip_scr, 128, "skipped=%llu\n", (unsigned long long) w->skipped);
        1:  306:            if (total >= 128 || total <= 0) {
        -:  307:                L_DEBUG("LOGGER: Failed to flatten skipped message into watcher [%d]\n", w->sfd);
    #####:  308:                w->skipped++;
    #####:  309:                ls->watcher_skipped++;
    #####:  310:                continue;
        -:  311:            }
        1:  312:            bipbuf_push(w->buf, total);
        1:  313:            w->skipped = 0;
        -:  314:        }
        -:  315:        /* Can't fail because bipbuf_request succeeded. */
      319:  316:        bipbuf_offer(w->buf, (unsigned char *) scratch, scratch_len);
      319:  317:        ls->watcher_sent++;
        -:  318:    }
    58437:  319:}
        -:  320:
        -:  321:/* Called with logger stack locked.
        -:  322: * Releases every chunk associated with a watcher and closes the connection.
        -:  323: * We can't presently send a connection back to the worker for further
        -:  324: * processing.
        -:  325: */
        1:  326:static void logger_thread_close_watcher(logger_watcher *w) {
        -:  327:    L_DEBUG("LOGGER: Closing dead watcher\n");
        1:  328:    watchers[w->id] = NULL;
        1:  329:    sidethread_conn_close(w->c);
        1:  330:    watcher_count--;
        1:  331:    bipbuf_free(w->buf);
        1:  332:    free(w);
        1:  333:    logger_set_flags();
        1:  334:}
        -:  335:
        -:  336:/* Reads a particular worker thread's available bipbuf bytes. Parses each log
        -:  337: * entry into the watcher buffers.
        -:  338: */
    25750:  339:static int logger_thread_read(logger *l, struct logger_stats *ls) {
        -:  340:    unsigned int size;
    25750:  341:    unsigned int pos = 0;
        -:  342:    unsigned char *data;
        -:  343:    char scratch[LOGGER_PARSE_SCRATCH];
        -:  344:    logentry *e;
    25750:  345:    pthread_mutex_lock(&l->mutex);
    25750:  346:    data = bipbuf_peek_all(l->buf, &size);
    25750:  347:    pthread_mutex_unlock(&l->mutex);
        -:  348:
    25750:  349:    if (data == NULL) {
        -:  350:        return 0;
        -:  351:    }
        -:  352:    L_DEBUG("LOGGER: Got %d bytes from bipbuffer\n", size);
        -:  353:
        -:  354:    /* parse buffer */
    59561:  355:    while (pos < size && watcher_count > 0) {
        -:  356:        enum logger_parse_entry_ret ret;
    58437:  357:        int scratch_len = 0;
    58437:  358:        e = (logentry *) (data + pos);
    58437:  359:        ret = logger_thread_parse_entry(e, ls, scratch, &scratch_len);
    58437:  360:        if (ret != LOGGER_PARSE_ENTRY_OK) {
        -:  361:            /* TODO: stats counter */
    #####:  362:            fprintf(stderr, "LOGGER: Failed to parse log entry\n");
        -:  363:        } else {
    58437:  364:            logger_thread_write_entry(e, ls, scratch, scratch_len);
        -:  365:        }
    58437:  366:        pos += sizeof(logentry) + e->size + e->pad;
        -:  367:    }
     1124:  368:    assert(pos <= size);
        -:  369:
     1124:  370:    pthread_mutex_lock(&l->mutex);
     1124:  371:    data = bipbuf_poll(l->buf, size);
     1124:  372:    ls->worker_written += l->written;
     1124:  373:    ls->worker_dropped += l->dropped;
     1124:  374:    l->written = 0;
     1124:  375:    l->dropped = 0;
     1124:  376:    pthread_mutex_unlock(&l->mutex);
     1124:  377:    if (data == NULL) {
    #####:  378:        fprintf(stderr, "LOGGER: unexpectedly couldn't advance buf pointer\n");
    #####:  379:        assert(0);
        -:  380:    }
     1124:  381:    return size; /* maybe the count of objects iterated? */
        -:  382:}
        -:  383:
        -:  384:/* Since the event loop code isn't reusable without a refactor, and we have a
        -:  385: * limited number of potential watchers, we run our own poll loop.
        -:  386: * This calls poll() unnecessarily during write flushes, should be possible to
        -:  387: * micro-optimize later.
        -:  388: *
        -:  389: * This flushes buffers attached to watchers, iterating through the bytes set
        -:  390: * to each worker. Also checks for readability in case client connection was
        -:  391: * closed.
        -:  392: *
        -:  393: * Allows a specific watcher to be flushed (if buf full)
        -:  394: */
     6459:  395:static int logger_thread_poll_watchers(int force_poll, int watcher) {
        -:  396:    int x;
     6459:  397:    int nfd = 0;
        -:  398:    unsigned char *data;
     6459:  399:    unsigned int data_size = 0;
     6459:  400:    int flushed = 0;
        -:  401:
   135639:  402:    for (x = 0; x < WATCHER_LIMIT; x++) {
   129180:  403:        logger_watcher *w = watchers[x];
   129180:  404:        if (w == NULL || (watcher != WATCHER_ALL && x != watcher))
   126530:  405:            continue;
        -:  406:
     2650:  407:        data = bipbuf_peek_all(w->buf, &data_size);
     2650:  408:        if (data != NULL) {
     2649:  409:            watchers_pollfds[nfd].fd = w->sfd;
     2649:  410:            watchers_pollfds[nfd].events = POLLOUT;
     2649:  411:            nfd++;
        1:  412:        } else if (force_poll) {
        1:  413:            watchers_pollfds[nfd].fd = w->sfd;
        1:  414:            watchers_pollfds[nfd].events = POLLIN;
        1:  415:            nfd++;
        -:  416:        }
        -:  417:        /* This gets set after a call to poll, and should be used to gate on
        -:  418:         * calling poll again.
        -:  419:         */
     2650:  420:        w->failed_flush = false;
        -:  421:    }
        -:  422:
     6459:  423:    if (nfd == 0)
        -:  424:        return 0;
        -:  425:
        -:  426:    //L_DEBUG("LOGGER: calling poll() [data_size: %d]\n", data_size);
     5296:  427:    int ret = poll(watchers_pollfds, nfd, 0);
        -:  428:
     2648:  429:    if (ret < 0) {
    #####:  430:        perror("something failed with logger thread watcher fd polling");
    #####:  431:        return -1;
        -:  432:    }
        -:  433:
        -:  434:    nfd = 0;
    52960:  435:    for (x = 0; x < WATCHER_LIMIT; x++) {
    52960:  436:        logger_watcher *w = watchers[x];
    52960:  437:        if (w == NULL)
    50309:  438:            continue;
        -:  439:
     2651:  440:        data_size = 0;
        -:  441:        /* Early detection of a disconnect. Otherwise we have to wait until
        -:  442:         * the next write
        -:  443:         */
     2651:  444:        if (watchers_pollfds[nfd].revents & POLLIN) {
        -:  445:            char buf[1];
    #####:  446:            int res = read(w->sfd, buf, 1);
    #####:  447:            if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
        -:  448:                L_DEBUG("LOGGER: watcher closed remotely\n");
    #####:  449:                logger_thread_close_watcher(w);
    #####:  450:                nfd++;
    #####:  451:                continue;
        -:  452:            }
        -:  453:        }
     2651:  454:        if ((data = bipbuf_peek_all(w->buf, &data_size)) != NULL) {
     2650:  455:            if (watchers_pollfds[nfd].revents & (POLLHUP|POLLERR)) {
        -:  456:                L_DEBUG("LOGGER: watcher closed during poll() call\n");
        1:  457:                logger_thread_close_watcher(w);
     2649:  458:            } else if (watchers_pollfds[nfd].revents & POLLOUT) {
       13:  459:                int total = 0;
        -:  460:
        -:  461:                /* We can write a bit. */
       13:  462:                switch (w->t) {
        -:  463:                    case LOGGER_WATCHER_STDERR:
    #####:  464:                        total = fwrite(data, 1, data_size, stderr);
    #####:  465:                        break;
        -:  466:                    case LOGGER_WATCHER_CLIENT:
       13:  467:                        total = write(w->sfd, data, data_size);
       13:  468:                        break;
        -:  469:                }
        -:  470:
        -:  471:                L_DEBUG("LOGGER: poll() wrote %d to %d (data_size: %d) (bipbuf_used: %d)\n", total, w->sfd,
        -:  472:                        data_size, bipbuf_used(w->buf));
       13:  473:                if (total == -1) {
    #####:  474:                    if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  475:                        logger_thread_close_watcher(w);
        -:  476:                    }
        -:  477:                    L_DEBUG("LOGGER: watcher hit EAGAIN\n");
       13:  478:                } else if (total == 0) {
    #####:  479:                    logger_thread_close_watcher(w);
        -:  480:                } else {
       13:  481:                    bipbuf_poll(w->buf, total);
       13:  482:                    flushed += total;
        -:  483:                }
        -:  484:            }
        -:  485:        }
     2651:  486:        nfd++;
        -:  487:    }
        -:  488:    return flushed;
        -:  489:}
        -:  490:
     5330:  491:static void logger_thread_sum_stats(struct logger_stats *ls) {
     5330:  492:    STATS_LOCK();
     5330:  493:    stats.log_worker_dropped  += ls->worker_dropped;
     5330:  494:    stats.log_worker_written  += ls->worker_written;
     5330:  495:    stats.log_watcher_skipped += ls->watcher_skipped;
     5330:  496:    stats.log_watcher_sent    += ls->watcher_sent;
     5330:  497:    STATS_UNLOCK();
     5330:  498:}
        -:  499:
        -:  500:#define MAX_LOGGER_SLEEP 1000000
        -:  501:#define MIN_LOGGER_SLEEP 1000
        -:  502:
        -:  503:/* Primary logger thread routine */
       95:  504:static void *logger_thread(void *arg) {
       95:  505:    useconds_t to_sleep = MIN_LOGGER_SLEEP;
        -:  506:    L_DEBUG("LOGGER: Starting logger thread\n");
     5520:  507:    while (do_run_logger_thread) {
     5425:  508:        int found_logs = 0;
        -:  509:        logger *l;
        -:  510:        struct logger_stats ls;
     5425:  511:        memset(&ls, 0, sizeof(struct logger_stats));
        -:  512:
        -:  513:        /* only sleep if we're *above* the minimum */
     5425:  514:        if (to_sleep > MIN_LOGGER_SLEEP)
     4216:  515:            usleep(to_sleep);
        -:  516:
        -:  517:        /* Call function to iterate each logger. */
     5330:  518:        pthread_mutex_lock(&logger_stack_lock);
    31080:  519:        for (l = logger_stack_head; l != NULL; l=l->next) {
        -:  520:            /* lock logger, call function to manipulate it */
    25750:  521:            found_logs += logger_thread_read(l, &ls);
        -:  522:        }
        -:  523:
     5330:  524:        logger_thread_poll_watchers(1, WATCHER_ALL);
     5330:  525:        pthread_mutex_unlock(&logger_stack_lock);
        -:  526:
        -:  527:        /* TODO: abstract into a function and share with lru_crawler */
     5330:  528:        if (!found_logs) {
     4206:  529:            if (to_sleep < MAX_LOGGER_SLEEP)
     4189:  530:                to_sleep += to_sleep / 8;
     4206:  531:            if (to_sleep > MAX_LOGGER_SLEEP)
        3:  532:                to_sleep = MAX_LOGGER_SLEEP;
        -:  533:        } else {
     1124:  534:            to_sleep /= 2;
     1124:  535:            if (to_sleep < MIN_LOGGER_SLEEP)
     1114:  536:                to_sleep = MIN_LOGGER_SLEEP;
        -:  537:        }
     5330:  538:        logger_thread_sum_stats(&ls);
        -:  539:    }
        -:  540:
    #####:  541:    return NULL;
        -:  542:}
        -:  543:
       95:  544:static int start_logger_thread(void) {
        -:  545:    int ret;
       95:  546:    do_run_logger_thread = 1;
       95:  547:    if ((ret = pthread_create(&logger_tid, NULL,
        -:  548:                              logger_thread, NULL)) != 0) {
    #####:  549:        fprintf(stderr, "Can't start logger thread: %s\n", strerror(ret));
    #####:  550:        return -1;
        -:  551:    }
        -:  552:    return 0;
        -:  553:}
        -:  554:
        -:  555:// future.
        -:  556:/*static int stop_logger_thread(void) {
        -:  557:    do_run_logger_thread = 0;
        -:  558:    pthread_join(logger_tid, NULL);
        -:  559:    return 0;
        -:  560:}*/
        -:  561:
        -:  562:/*************************
        -:  563: * Public functions for submitting logs and starting loggers from workers.
        -:  564: *************************/
        -:  565:
        -:  566:/* Global logger thread start/init */
       95:  567:void logger_init(void) {
        -:  568:    /* TODO: auto destructor when threads exit */
        -:  569:    /* TODO: error handling */
        -:  570:
        -:  571:    /* init stack for iterating loggers */
       95:  572:    logger_stack_head = 0;
       95:  573:    logger_stack_tail = 0;
       95:  574:    pthread_key_create(&logger_key, NULL);
        -:  575:
       95:  576:    if (start_logger_thread() != 0) {
    #####:  577:        abort();
        -:  578:    }
        -:  579:
        -:  580:    /* This can be removed once the global stats initializer is improved */
       95:  581:    STATS_LOCK();
       95:  582:    stats.log_worker_dropped = 0;
       95:  583:    stats.log_worker_written = 0;
       95:  584:    stats.log_watcher_skipped = 0;
       95:  585:    stats.log_watcher_sent = 0;
       95:  586:    STATS_UNLOCK();
        -:  587:    /* This is what adding a STDERR watcher looks like. should replace old
        -:  588:     * "verbose" settings. */
        -:  589:    //logger_add_watcher(NULL, 0);
       95:  590:    return;
        -:  591:}
        -:  592:
        -:  593:/* called *from* the thread using a logger.
        -:  594: * initializes the per-thread bipbuf, links it into the list of loggers
        -:  595: */
      454:  596:logger *logger_create(void) {
        -:  597:    L_DEBUG("LOGGER: Creating and linking new logger instance\n");
      454:  598:    logger *l = calloc(1, sizeof(logger));
      454:  599:    if (l == NULL) {
        -:  600:        return NULL;
        -:  601:    }
        -:  602:
      465:  603:    l->buf = bipbuf_new(settings.logger_buf_size);
      464:  604:    if (l->buf == NULL) {
    #####:  605:        free(l);
    #####:  606:        return NULL;
        -:  607:    }
        -:  608:
      464:  609:    l->entry_map = default_entries;
        -:  610:
      464:  611:    pthread_mutex_init(&l->mutex, NULL);
      463:  612:    pthread_setspecific(logger_key, l);
        -:  613:
        -:  614:    /* add to list of loggers */
      461:  615:    logger_link_q(l);
      467:  616:    return l;
        -:  617:}
        -:  618:
        -:  619:/* helpers for logger_log */
        -:  620:
        1:  621:static void _logger_log_evictions(logentry *e, item *it) {
        1:  622:    struct logentry_eviction *le = (struct logentry_eviction *) e->data;
        1:  623:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
        1:  624:    le->latime = current_time - it->time;
        1:  625:    le->it_flags = it->it_flags;
        1:  626:    le->nkey = it->nkey;
        1:  627:    le->clsid = ITEM_clsid(it);
        2:  628:    memcpy(le->key, ITEM_key(it), it->nkey);
        1:  629:    e->size = sizeof(struct logentry_eviction) + le->nkey;
        1:  630:}
        -:  631:#ifdef EXTSTORE
        -:  632:/* TODO: When more logging endpoints are done and the extstore API has matured
        -:  633: * more, this could be merged with above and print different types of
        -:  634: * expulsion events.
        -:  635: */
        -:  636:static void _logger_log_ext_write(logentry *e, item *it, uint8_t bucket) {
        -:  637:    struct logentry_ext_write *le = (struct logentry_ext_write *) e->data;
        -:  638:    le->exptime = (it->exptime > 0) ? (long long int)(it->exptime - current_time) : (long long int) -1;
        -:  639:    le->latime = current_time - it->time;
        -:  640:    le->it_flags = it->it_flags;
        -:  641:    le->nkey = it->nkey;
        -:  642:    le->clsid = ITEM_clsid(it);
        -:  643:    le->bucket = bucket;
        -:  644:    memcpy(le->key, ITEM_key(it), it->nkey);
        -:  645:    e->size = sizeof(struct logentry_ext_write) + le->nkey;
        -:  646:}
        -:  647:#endif
        -:  648:/* 0 == nf, 1 == found. 2 == flushed. 3 == expired.
        -:  649: * might be useful to store/print the flags an item has?
        -:  650: * could also collapse this and above code into an "item status" struct. wait
        -:  651: * for more endpoints to be written before making it generic, though.
        -:  652: * TODO: This and below should track and reprint the client fd.
        -:  653: */
        -:  654:static void _logger_log_item_get(logentry *e, const int was_found, const char *key,
        -:  655:        const int nkey, const uint8_t clsid) {
    58435:  656:    struct logentry_item_get *le = (struct logentry_item_get *) e->data;
    58435:  657:    le->was_found = was_found;
    58435:  658:    le->nkey = nkey;
    58435:  659:    le->clsid = clsid;
   116870:  660:    memcpy(le->key, key, nkey);
    58435:  661:    e->size = sizeof(struct logentry_item_get) + nkey;
        -:  662:}
        -:  663:
        -:  664:static void _logger_log_item_store(logentry *e, const enum store_item_type status,
        -:  665:        const int comm, char *key, const int nkey, rel_time_t ttl, const uint8_t clsid) {
        1:  666:    struct logentry_item_store *le = (struct logentry_item_store *) e->data;
        1:  667:    le->status = status;
        1:  668:    le->cmd = comm;
        1:  669:    le->nkey = nkey;
        1:  670:    le->clsid = clsid;
        1:  671:    if (ttl != 0) {
    #####:  672:        le->ttl = ttl - current_time;
        -:  673:    } else {
        1:  674:        le->ttl = 0;
        -:  675:    }
        2:  676:    memcpy(le->key, key, nkey);
        1:  677:    e->size = sizeof(struct logentry_item_store) + nkey;
        -:  678:}
        -:  679:
        -:  680:/* Public function for logging an entry.
        -:  681: * Tries to encapsulate as much of the formatting as possible to simplify the
        -:  682: * caller's code.
        -:  683: */
    88007:  684:enum logger_ret_type logger_log(logger *l, const enum log_entry_type event, const void *entry, ...) {
    88007:  685:    bipbuf_t *buf = l->buf;
    88007:  686:    bool nospace = false;
        -:  687:    va_list ap;
    88007:  688:    int total = 0;
        -:  689:    logentry *e;
        -:  690:
    88007:  691:    const entry_details *d = &l->entry_map[event];
    88007:  692:    int reqlen = d->reqlen;
        -:  693:
    88007:  694:    pthread_mutex_lock(&l->mutex);
        -:  695:    /* Request a maximum length of data to write to */
    88007:  696:    e = (logentry *) bipbuf_request(buf, (sizeof(logentry) + reqlen));
    88007:  697:    if (e == NULL) {
    29570:  698:        pthread_mutex_unlock(&l->mutex);
    29570:  699:        l->dropped++;
    29570:  700:        return LOGGER_RET_NOSPACE;
        -:  701:    }
    58437:  702:    e->event = d->subtype;
    58437:  703:    e->pad = 0;
    58437:  704:    e->gid = logger_get_gid();
        -:  705:    /* TODO: Could pass this down as an argument now that we're using
        -:  706:     * LOGGER_LOG() macro.
        -:  707:     */
    58437:  708:    e->eflags = d->eflags;
        -:  709:    /* Noting time isn't optional. A feature may be added to avoid rendering
        -:  710:     * time and/or gid to a logger.
        -:  711:     */
    58437:  712:    gettimeofday(&e->tv, NULL);
        -:  713:
    58437:  714:    switch (d->subtype) {
        -:  715:        case LOGGER_TEXT_ENTRY:
    #####:  716:            va_start(ap, entry);
    #####:  717:            total = vsnprintf((char *) e->data, reqlen, d->format, ap);
    #####:  718:            va_end(ap);
    #####:  719:            if (total >= reqlen || total <= 0) {
    #####:  720:                fprintf(stderr, "LOGGER: Failed to vsnprintf a text entry: (total) %d\n", total);
        -:  721:                break;
        -:  722:            }
    #####:  723:            e->size = total + 1; /* null byte */
        -:  724:
    #####:  725:            break;
        -:  726:        case LOGGER_EVICTION_ENTRY:
        1:  727:            _logger_log_evictions(e, (item *)entry);
        1:  728:            break;
        -:  729:#ifdef EXTSTORE
        -:  730:        case LOGGER_EXT_WRITE_ENTRY:
        -:  731:            va_start(ap, entry);
        -:  732:            int ew_bucket = va_arg(ap, int);
        -:  733:            va_end(ap);
        -:  734:            _logger_log_ext_write(e, (item *)entry, ew_bucket);
        -:  735:            break;
        -:  736:#endif
        -:  737:        case LOGGER_ITEM_GET_ENTRY:
    58435:  738:            va_start(ap, entry);
    58435:  739:            int was_found = va_arg(ap, int);
    58435:  740:            char *key = va_arg(ap, char *);
    58435:  741:            size_t nkey = va_arg(ap, size_t);
    58435:  742:            uint8_t gclsid = va_arg(ap, int);
   116870:  743:            _logger_log_item_get(e, was_found, key, nkey, gclsid);
    58435:  744:            va_end(ap);
    58435:  745:            break;
        -:  746:        case LOGGER_ITEM_STORE_ENTRY:
        1:  747:            va_start(ap, entry);
        1:  748:            enum store_item_type status = va_arg(ap, enum store_item_type);
        1:  749:            int comm = va_arg(ap, int);
        1:  750:            char *skey = va_arg(ap, char *);
        1:  751:            size_t snkey = va_arg(ap, size_t);
        1:  752:            rel_time_t sttl = va_arg(ap, rel_time_t);
        1:  753:            uint8_t sclsid = va_arg(ap, int);
        2:  754:            _logger_log_item_store(e, status, comm, skey, snkey, sttl, sclsid);
        1:  755:            va_end(ap);
        1:  756:            break;
        -:  757:    }
        -:  758:
        -:  759:#ifdef NEED_ALIGN
        -:  760:    /* Need to ensure *next* request is aligned. */
        -:  761:    if (sizeof(logentry) + e->size % 8 != 0) {
        -:  762:        e->pad = 8 - (sizeof(logentry) + e->size % 8);
        -:  763:    }
        -:  764:#endif
        -:  765:
        -:  766:    /* Push pointer forward by the actual amount required */
    58437:  767:    if (bipbuf_push(buf, (sizeof(logentry) + e->size + e->pad)) == 0) {
    #####:  768:        fprintf(stderr, "LOGGER: Failed to bipbuf push a text entry\n");
    #####:  769:        pthread_mutex_unlock(&l->mutex);
    #####:  770:        return LOGGER_RET_ERR;
        -:  771:    }
    58437:  772:    l->written++;
        -:  773:    L_DEBUG("LOGGER: Requested %d bytes, wrote %lu bytes\n", reqlen,
        -:  774:            (sizeof(logentry) + e->size));
        -:  775:
    58437:  776:    pthread_mutex_unlock(&l->mutex);
        -:  777:
        -:  778:    if (nospace) {
        -:  779:        return LOGGER_RET_NOSPACE;
        -:  780:    } else {
    58437:  781:        return LOGGER_RET_OK;
        -:  782:    }
        -:  783:}
        -:  784:
        -:  785:/* Passes a client connection socket from a primary worker thread to the
        -:  786: * logger thread. Caller *must* event_del() the client before handing it over.
        -:  787: * Presently there's no way to hand the client back to the worker thread.
        -:  788: */
        3:  789:enum logger_add_watcher_ret logger_add_watcher(void *c, const int sfd, uint16_t f) {
        -:  790:    int x;
        3:  791:    logger_watcher *w = NULL;
        3:  792:    pthread_mutex_lock(&logger_stack_lock);
        3:  793:    if (watcher_count >= WATCHER_LIMIT) {
        -:  794:        return LOGGER_ADD_WATCHER_TOO_MANY;
        -:  795:    }
        -:  796:
        1:  797:    for (x = 0; x < WATCHER_LIMIT-1; x++) {
        4:  798:        if (watchers[x] == NULL)
        -:  799:            break;
        -:  800:    }
        -:  801:
        3:  802:    w = calloc(1, sizeof(logger_watcher));
        3:  803:    if (w == NULL) {
    #####:  804:        pthread_mutex_unlock(&logger_stack_lock);
    #####:  805:        return LOGGER_ADD_WATCHER_FAILED;
        -:  806:    }
        3:  807:    w->c = c;
        3:  808:    w->sfd = sfd;
        3:  809:    if (sfd == 0 && c == NULL) {
    #####:  810:        w->t = LOGGER_WATCHER_STDERR;
        -:  811:    } else {
        3:  812:        w->t = LOGGER_WATCHER_CLIENT;
        -:  813:    }
        3:  814:    w->id = x;
        3:  815:    w->eflags = f;
        3:  816:    w->buf = bipbuf_new(settings.logger_watcher_buf_size);
        3:  817:    if (w->buf == NULL) {
    #####:  818:        free(w);
    #####:  819:        pthread_mutex_unlock(&logger_stack_lock);
    #####:  820:        return LOGGER_ADD_WATCHER_FAILED;
        -:  821:    }
        3:  822:    bipbuf_offer(w->buf, (unsigned char *) "OK\r\n", 4);
        -:  823:
        3:  824:    watchers[x] = w;
        3:  825:    watcher_count++;
        -:  826:    /* Update what flags the global logs will watch */
        3:  827:    logger_set_flags();
        -:  828:
        3:  829:    pthread_mutex_unlock(&logger_stack_lock);
        3:  830:    return LOGGER_ADD_WATCHER_OK;
        -:  831:}
